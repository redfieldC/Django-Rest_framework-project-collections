# Django REST Framework Projects Collection

Welcome to the **Django REST Framework Projects Collection** repository! This repository serves as a comprehensive showcase of my hands-on experience and expertise in working with Django REST Framework (DRF). Each project focuses on implementing specific features, solving real-world problems, and exploring advanced concepts of DRF.

## ðŸš€ Features and Concepts Implemented

This repository contains projects that demonstrate the following DRF concepts:

### Core Concepts
- **API Views:** Implementation of `APIView`, `GenericAPIView`, and `ViewSet` for building scalable APIs.
- **Serializers:** 
  - Basic and custom serializers for flexible data serialization and deserialization.
  - **Nested Serializers:** For managing complex data relationships.
- **CRUD Operations:** Handling Create, Read, Update, and Delete functionalities.

### Advanced Topics
- **Relationships:**
  - One-to-One, One-to-Many, and Many-to-Many relationships.
  - Customizing related fields and serializers.
- **ListField and Custom Fields:** Managing custom data structures with `ListField` and user-defined fields.
- **Nested Serializers:** Handling complex nested data structures.
- **Query Optimization:** Using `select_related` and `prefetch_related` to minimize database queries.

### Authentication and Permissions
- **Authentication:**
  - Token-based authentication using `TokenAuthentication` and `JWT`.
  - Custom authentication mechanisms.
- **Permissions:** 
  - Custom permission classes.
  - Role-based access controls.

### Other Features
- **Pagination:** Implementing custom and built-in pagination schemes.
- **Filtering and Search:** Using Django's ORM and DRF's filters for efficient data retrieval.
- **Throttling:** Rate-limiting API requests to prevent abuse.

## ðŸ“‚ Projects Overview

Below is a list of the projects included in this repository:

### 1. **E-Commerce API**
   - Features: Product management, cart system, and checkout.
   - Concepts: Nested serializers, token authentication, and filtering.

### 2. **Blog API**
   - Features: Multi-user blog platform with categories and comments.
   - Concepts: Many-to-Many relationships, `ListField` for tags, and custom permissions.

### 3. **User Management System**
   - Features: User registration, login, profile management, and JWT authentication.
   - Concepts: Custom user models, role-based permissions, and pagination.

### 4. **Task Management App**
   - Features: Project and task tracking with deadlines and reminders.
   - Concepts: One-to-Many relationships, custom throttling, and query optimization.

And more! Each project is contained in its own folder with a detailed README explaining its purpose and implementation.

Each project has its own requirements.txt , set up a virtualenvironment and install dependencies using pip install -r requirements.txt

âœ¨ Why This Repository?
This collection showcases:

My ability to work with Django REST Framework for building scalable and maintainable APIs.
My understanding of core and advanced DRF concepts.
My problem-solving skills applied in real-world scenarios.
